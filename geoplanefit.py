# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GeoPlaneFit
                                 A QGIS plugin
 Fit planes using DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-30
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Ondrej Lexa
        email                : lexa.ondrej@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import sys
import json
from qgis.PyQt.QtCore import (
    QSettings, QTranslator, QCoreApplication,
    Qt, QAbstractListModel, QVariant
    )
from qgis.PyQt.QtGui import QIcon, QColor, QCursor
from qgis.PyQt.QtWidgets import QAction, QMenu, QFileDialog, QMessageBox
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .geoplanefit_dockwidget import GeoPlaneFitDockWidget
from .geoplane_classes import GeoPlane
import os.path

from qgis.core import (
    Qgis, QgsProject, QgsPointXY, QgsGeometry,
    QgsWkbTypes, QgsMapLayerProxyModel,
    QgsCoordinateTransform, QgsCoordinateReferenceSystem,
    QgsFeature, QgsFields, QgsField, QgsPoint, QgsJsonExporter, QgsJsonUtils
    )
from qgis.gui import QgsMapToolEmitPoint, QgsRubberBand


class GeoPlaneFit:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        
        # a reference to our map canvas 
        self.canvas = self.iface.mapCanvas() 

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GeoPlaneFit_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geoplane collector')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GeoPlaneFit')
        self.toolbar.setObjectName(u'GeoPlaneFit')

        #print "** INITIALIZING GeoPlaneFit"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GeoPlaneFit', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geoplanefit/icons/toolicon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Fit geoplanes'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING GeoPlaneFit"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False
        if self.highlight is not None:
            self.canvas.scene().removeItem(self.highlight)
            self.highlight = None


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD GeoPlaneFit"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Geoplane collector'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = GeoPlaneFitDockWidget()
                # setup docketwidget
                icon = QIcon(':/plugins/geoplanefit/icons/digicon.png')
                self.dockwidget.digiButton.setIcon(icon)
                self.dockwidget.digiButton.clicked.connect(self.digiline)
                self.dockwidget.rasterComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
                self.model = GeoPlaneModel()
                self.dockwidget.geoplaneView.setModel(self.model)
                self.selmodel = self.dockwidget.geoplaneView.selectionModel()
                self.selmodel.selectionChanged.connect(self.show_trace)
                # contect menu
                self.dockwidget.geoplaneView.setContextMenuPolicy(Qt.CustomContextMenu)
                self.dockwidget.geoplaneView.customContextMenuRequested.connect(self.context_menu)
                # highlight
                self.highlight = None
                self.previousMapTool = None
                # io buttons
                self.dockwidget.loadButton.clicked.connect(self.loadfromfile)
                self.dockwidget.clearButton.clicked.connect(self.cleardata)
                self.dockwidget.saveButton.clicked.connect(self.savetofile)
                

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def savetofile(self):
        if self.dockwidget.rasterComboBox.currentLayer():
            if len(self.model.planes) > 0:
                filename, ftype = QFileDialog.getSaveFileName(caption='Select a file', filter='JSON File (*.json);;GeoJSON File (*.geojson)')
                if filename != '':
                    try:
                        if ftype.startswith('JSON'):
                            with open(filename, 'w') as outfile:
                                json.dump([g.to_dict() for g in self.model.planes], outfile)
                            self.iface.messageBar().pushMessage('Saved', f'All data saved to JSON file', level=Qgis.Success, duration=2)
                        elif ftype.startswith('GeoJSON'):
                            featurelist = []
                            destCrs = QgsCoordinateReferenceSystem('EPSG:4326')
                            for fid, gf in enumerate(self.model.planes):
                                feat = QgsFeature()
                                fields = QgsFields()
                                fields.append(QgsField('id', QVariant.Int))
                                feat.setFields(fields)
                                # prepare CRS transformation to dem layer CRS
                                sourceCrs = QgsCoordinateReferenceSystem(gf.crs)
                                tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())
                                # creating line from point_list
                                polyline_list = [QgsPoint(*pt) for pt in gf.coords.tolist()]
                                geom = QgsGeometry().fromPolyline(polyline_list)
                                geom.transform(tr)
                                feat.setGeometry(geom)
                                feat['id'] = fid
                                featurelist.append(feat)
                            exporter = QgsJsonExporter()
                            with open(filename, 'w') as outfile:
                                outfile.write(exporter.exportFeatures(featurelist))
                            self.iface.messageBar().pushMessage('Saved', f'All data saved to GeoJSON file', level=Qgis.Success, duration=2)
                        else:
                            self.iface.messageBar().pushMessage('Save failed', f'Wrong filetype', level=Qgis.Warning, duration=2)
                    except:
                        self.iface.messageBar().pushMessage('Error', f'Ooops! {sys.exc_info()[0]} occurred', level=Qgis.Critical, duration=2)
        else:
            self.iface.messageBar().pushMessage('Warning', f'You have to select active DEM layer', level=Qgis.Warning, duration=2)

    def loadfromfile(self):
        if self.dockwidget.rasterComboBox.currentLayer():
            if len(self.model.planes) == 0:
                filename, ftype = QFileDialog.getOpenFileName(caption='Select a file', filter='JSON File (*.json);;GeoJSON File (*.geojson)')
                if filename != '':
                    try:
                        if ftype.startswith('JSON'):
                            with open(filename) as json_file:
                                data = json.load(json_file)
                            planes = [GeoPlane(d['coords'], d['crs']) for d in data]
                        elif ftype.startswith('GeoJSON'):
                            with open(filename, 'r') as json_file:
                                s = json_file.read()
                            importer = QgsJsonUtils()
                            features = importer.stringToFeatureList(s)
                            planes = []
                            # prepare CRS transformation to dem layer CRS
                            sourceCrs = QgsCoordinateReferenceSystem('EPSG:4326')
                            destCrs = self.dockwidget.rasterComboBox.currentLayer().crs()
                            tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())
                            for feat in features:
                                geom = feat.geometry()
                                geom.transform(tr)
                                coords = [[p.x(), p.y(), p.z()] for p in geom.constGet()]
                                planes.append(GeoPlane(coords, destCrs.authid()))
                        else:
                            self.iface.messageBar().pushMessage('Save failed', f'Wrong filetype', level=Qgis.Warning, duration=2)
                    except:
                        self.iface.messageBar().pushMessage('Error', f'Ooops! {sys.exc_info()[0]} occurred', level=Qgis.Critical, duration=2)
                    else:
                        self.model.planes = planes
                        # Trigger refresh.
                        self.model.layoutChanged.emit()
                        self.selmodel.clearSelection()
        else:
            self.iface.messageBar().pushMessage('Warning', f'You have to select active DEM layer', level=Qgis.Warning, duration=2)

    def cleardata(self):
        if self.dockwidget.rasterComboBox.currentLayer():
            if len(self.model.planes) > 0:
                reply = QMessageBox.question(self.iface.mainWindow(), 'Remove all data', 
                                            'Are you sure to clear all data?', QMessageBox.Yes, QMessageBox.No)
                if reply == QMessageBox.Yes:
                    self.model.planes = []
                    # Trigger refresh.
                    self.model.layoutChanged.emit()
                    self.selmodel.clearSelection()

    def show_trace(self):
        if self.highlight is not None:
            self.canvas.scene().removeItem(self.highlight)
            self.highlight = None
        if self.selmodel.hasSelection():
            row = self.selmodel.currentIndex().row()
            gf = self.model.planes[row]
            self.highlight = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)
            # prepare CRS transformation to dem layer CRS
            sourceCrs = QgsCoordinateReferenceSystem(gf.crs)
            destCrs = QgsProject.instance().crs()
            tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())
            # creating line from point_list
            points = [tr.transform(QgsPointXY(c[0], c[1])) for c in gf.coords]
            self.highlight.setToGeometry(QgsGeometry.fromPolylineXY(points), None)
            color = QColor('yellow')
            # color.setAlpha(60)
            self.highlight.setColor(color)
            self.highlight.setWidth(2)

    def context_menu(self, pos):
        row = self.dockwidget.geoplaneView.indexAt(pos).row()
        if row > -1:
            gf = self.model.planes[row]
            menu = QMenu()
            removeAction = menu.addAction(f'Remove {gf.fol}')
            res = menu.exec_(QCursor.pos())
            if res == removeAction:
                self.model.planes.remove(gf)
                # Trigger refresh.
                self.model.layoutChanged.emit()
                self.selmodel.clearSelection()

    def manage_click(self, currentPos, clickedButton):  
        """rubber band manager"""
        if clickedButton == Qt.LeftButton:
            self.myRubberBand.addPoint(currentPos)
        # terminate rubber band editing session
        if clickedButton == Qt.RightButton:
            dem = self.dockwidget.rasterComboBox.currentLayer().dataProvider()
            if self.myRubberBand.numberOfVertices() > 2:
                res = []
                # prepare CRS transformation to dem layer CRS
                sourceCrs = QgsProject.instance().crs()
                destCrs = self.dockwidget.rasterComboBox.currentLayer().crs()
                tr = QgsCoordinateTransform(sourceCrs, destCrs, QgsProject.instance())
                # for p in self.myRubberBand.asGeometry().smooth().asPolyline():
                for p in self.myRubberBand.asGeometry().asPolyline():
                    pdem = tr.transform(p)
                    val, ok = dem.sample(pdem, 1)
                    if ok:
                        res.append([pdem.x(), pdem.y(), val])
                try:
                    gf = GeoPlane(res, destCrs.authid())
                    self.model.planes.append(gf)
                    # Trigger refresh.
                    self.model.layoutChanged.emit()
                except:
                    self.iface.messageBar().pushMessage('Fit failed', f'Selected trace do not define plane', level=Qgis.Warning, duration=2)
            else:
                self.iface.messageBar().pushMessage('Warning', f'At least 3 points are needed for trace', level=Qgis.Warning, duration=2)
            # reset to the previous mapTool
            self.canvas.setMapTool(self.previousMapTool)
            self.previousMapTool = None
            # clean remove myMapTool and relative handlers
            self.myMapTool.deleteLater()
            # remove the rubber band from the canvas
            self.canvas.scene().removeItem(self.myRubberBand)
            # delete rubber band
            del self.myRubberBand


    def digiline(self):
        """collect trace as rubber band polyline"""
        if self.dockwidget.rasterComboBox.currentLayer():
            self.selmodel.clearSelection()
            if self.previousMapTool is None:
                self.previousMapTool = self.canvas.mapTool()
                self.myMapTool = QgsMapToolEmitPoint(self.canvas)

                # create the polygon rubber band associated to the current canvas
                self.myRubberBand = QgsRubberBand(self.canvas, QgsWkbTypes.LineGeometry)

                # set rubber band style
                color = QColor('red')
                color.setAlpha(75)
                self.myRubberBand.setColor(color)
                self.myRubberBand.setWidth(2)

                
                self.myMapTool.canvasClicked.connect( self.manage_click )
                self.canvas.setMapTool(self.myMapTool)
        else:
            self.iface.messageBar().pushMessage('Warning', f'You have to select active DEM layer', level=Qgis.Warning, duration=2)


class GeoPlaneModel(QAbstractListModel):
    def __init__(self, *args, **kwargs):
        super(GeoPlaneModel, self).__init__(*args, **kwargs)
        self.planes = []

    def data(self, index, role):
        if role == Qt.DisplayRole:
            # Return string repr of GeoPlane
            return f'({index.row()}) ' + str(self.planes[index.row()])
        if role == Qt.BackgroundRole:  # Qt.TextColorRole
            k = self.planes[index.row()].ot.k
            if k > 1:
                return QColor('red')
            if k > 0.5:
                return QColor('magenta')

    def rowCount(self, index):
        return len(self.planes)
